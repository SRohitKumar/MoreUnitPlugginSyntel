<?xml version="1.0" encoding="UTF-8" ?>

<mocking-templates version="1.0"
    xmlns="http://moreunit.org/mock/mocking-templates"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://moreunit.org/mock/mocking-templates http://moreunit.sourceforge.net/schemas/mocking-templates.xsd
    ">
    <category id="org.moreunit.mock.jmock2" name="jMock 2"/>
    <!-- TODO For JUnit 3: support changing test superclass (to use org.jmock.integration.junit3.MockObjectTestCase in our case) -->
    <mocking-template
        id="org.moreunit.mock.jmock2Default"
        category="org.moreunit.mock.jmock2"
        name="Default">
        <code-template id="mockeryDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
				private final ${mockeryType:newType(org.jmock.Mockery)} ${mockery:newName(mockeryType)} = new ${mockeryType:newType(org.jmock.Mockery)}() {{
					setImposteriser(${clsimposter:newType(org.jmock.lib.legacy.ClassImposteriser)}.INSTANCE);
				}};
            ]]></pattern>
        </code-template>
        <code-template id="dependencyDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
				private ${dependencyType} ${dependency} = ${mockery}.mock(${dependencyType}.class);
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
				private ${objectUnderTestType} ${objectUnderTest};
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestCreation" part="before-instance-method">
            <exclude-if condition="injection-type" value="constructor"/>
            <pattern><![CDATA[${objectUnderTest} = new ${objectUnderTestType}();]]></pattern>
        </code-template>
        <code-template id="constructorInjection" part="before-instance-method">
            <include-if condition="injection-type" value="constructor"/>
            <pattern><![CDATA[${objectUnderTest} = ${:constructWithDependencies(objectUnderTest, dependency)};]]></pattern>
        </code-template>
        <code-template id="setterInjection" part="before-instance-method">
            <include-if condition="injection-type" value="setter"/>
            <pattern><![CDATA[${:setDependency(objectUnderTest, dependency)};]]></pattern>
        </code-template>
        <code-template id="fieldInjection" part="before-instance-method">
            <include-if condition="injection-type" value="field"/>
            <pattern><![CDATA[${:assignDependency(objectUnderTest, dependency)};]]></pattern>
        </code-template>
    </mocking-template>
    <mocking-template
        id="org.moreunit.mock.jmock2ForJUnit4"
        category="org.moreunit.mock.jmock2"
        name="For JUnit 4">
        <code-template id="jmockRunnerDeclaration" part="test-class-annotation">
            <pattern><![CDATA[@${runWith:newType(org.junit.runner.RunWith)}(${runner:newType(org.jmock.integration.junit4.JMock)}.class)
            ]]></pattern>
        </code-template>
        <code-template id="mockeryDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
				private final ${mockeryType:newType(org.jmock.Mockery)} ${mockery:newName(mockeryType)} = new ${mockeryImpl:newType(org.jmock.integration.junit4.JUnit4Mockery)}() {{
					setImposteriser(${clsimposter:newType(org.jmock.lib.legacy.ClassImposteriser)}.INSTANCE);
				}};
            ]]></pattern>
        </code-template>
        <code-template id="dependencyDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
				private ${dependencyType} ${dependency} = ${mockery}.mock(${dependencyType}.class);
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
				private ${objectUnderTestType} ${objectUnderTest};
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestCreation" part="before-instance-method">
            <exclude-if condition="injection-type" value="constructor"/>
            <pattern><![CDATA[${objectUnderTest} = new ${objectUnderTestType}();]]></pattern>
        </code-template>
        <code-template id="constructorInjection" part="before-instance-method">
            <include-if condition="injection-type" value="constructor"/>
            <pattern><![CDATA[${objectUnderTest} = ${:constructWithDependencies(objectUnderTest, dependency)};]]></pattern>
        </code-template>
        <code-template id="setterInjection" part="before-instance-method">
            <include-if condition="injection-type" value="setter"/>
            <pattern><![CDATA[${:setDependency(objectUnderTest, dependency)};]]></pattern>
        </code-template>
        <code-template id="fieldInjection" part="before-instance-method">
            <include-if condition="injection-type" value="field"/>
            <pattern><![CDATA[${:assignDependency(objectUnderTest, dependency)};]]></pattern>
        </code-template>
    </mocking-template>
</mocking-templates>
