<?xml version="1.0" encoding="UTF-8" ?>

<mocking-templates version="1.0"
    xmlns="http://moreunit.org/mock/mocking-templates"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://moreunit.org/mock/mocking-templates http://moreunit.sourceforge.net/schemas/mocking-templates.xsd
    ">
    <category id="org.moreunit.mock.easymock" name="EasyMock"/>
    <mocking-template
        id="org.moreunit.mock.easymockDefault"
        category="org.moreunit.mock.easymock"
        name="Default">
        <code-template id="dependencyDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
                private ${dependencyType} ${dependency} = ${createNiceMockMethod:importStatic(org.easymock.EasyMock.createNiceMock)}createNiceMock(${dependencyType}.class);
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
                private ${objectUnderTestType} ${objectUnderTest};
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestCreation" part="before-instance-method">
            <exclude-if condition="injection-type" value="constructor"/>
            <pattern><![CDATA[${objectUnderTest} = new ${objectUnderTestType}();]]></pattern>
        </code-template>
        <code-template id="constructorInjection" part="before-instance-method">
            <include-if condition="injection-type" value="constructor"/>
            <pattern><![CDATA[${objectUnderTest} = ${:constructWithDependencies(objectUnderTest, dependency)};]]></pattern>
        </code-template>
        <code-template id="setterInjection" part="before-instance-method">
            <include-if condition="injection-type" value="setter"/>
            <pattern><![CDATA[${:setDependency(objectUnderTest, dependency)};]]></pattern>
        </code-template>
        <code-template id="fieldInjection" part="before-instance-method">
            <include-if condition="injection-type" value="field"/>
            <pattern><![CDATA[${:assignDependency(objectUnderTest, dependency)};]]></pattern>
        </code-template>
    </mocking-template>
    <mocking-template
        id="org.moreunit.mock.easymockWithPowermockAndAnnotations"
        category="org.moreunit.mock.easymock"
        name="With PowerMock">
        <code-template id="preparationOfClassesToMock" part="test-class-annotation">
            <pattern><![CDATA[@${prepareForTest:newType(org.powermock.core.classloader.annotations.PrepareForTest)}(/* TODO specify classes to prepare for test */)]]></pattern>
        </code-template>
        <code-template id="powermockRunnerDeclaration" part="test-class-annotation">
            <include-if condition="test-type" value="junit4"/>
            <pattern><![CDATA[@${runWith:newType(org.junit.runner.RunWith)}(${runner:newType(org.powermock.modules.junit4.PowerMockRunner)}.class)
]]></pattern>
        </code-template>
        <code-template id="dependencyDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
                @${mockAnnotation:newType(org.powermock.api.easymock.annotation.MockNice)} private ${dependencyType} ${dependency};
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestDeclaration" part="test-class-fields">
            <pattern><![CDATA[
            
                private ${objectUnderTestType} ${objectUnderTest};
            ]]></pattern>
        </code-template>
        <code-template id="objectFactoyDeclaration" part="test-class-fields">
            <include-if condition="test-type" value="testng"/>
            <pattern><![CDATA[
            
                @${objectFactory:newType(org.testng.annotations.ObjectFactory)}
public ${iObjectFactory:newType(org.testng.IObjectFactory)} getObjectFactory() {
    return new ${powerMockObjectFactory:newType(org.powermock.modules.testng.PowerMockObjectFactory)}();
}
            ]]></pattern>
        </code-template>
        <code-template id="objectUnderTestCreation" part="before-instance-method">
            <exclude-if condition="injection-type" value="constructor"/>
            <pattern><![CDATA[${objectUnderTest} = new ${objectUnderTestType}();]]></pattern>
        </code-template>
        <code-template id="constructorInjection" part="before-instance-method">
            <include-if condition="injection-type" value="constructor"/>
            <pattern><![CDATA[${objectUnderTest} = ${:constructWithDependencies(objectUnderTest, dependency)};]]></pattern>
        </code-template>
        <code-template id="setterInjection" part="before-instance-method">
            <include-if condition="injection-type" value="setter"/>
            <pattern><![CDATA[${:setDependency(objectUnderTest, dependency)};]]></pattern>
        </code-template>
        <code-template id="fieldInjection" part="before-instance-method">
            <include-if condition="injection-type" value="field"/>
            <pattern><![CDATA[${:assignDependency(objectUnderTest, dependency)};]]></pattern>
        </code-template>
    </mocking-template>
</mocking-templates>
